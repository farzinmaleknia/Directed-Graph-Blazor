@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation



	<div class="bg-dark bg-opacity-50" style="@($"position: absolute; height: {HeightMain}px; width: {WidthMain}px; top: 0; left: 0;")">

		<div class="d-flex flex-row-reverse mt-2 mx-4">
			<button class="btn btn-light btn-sm rounded-circle" style="margin-right:5px; z-index: 100;" title="Close" @onclick="Close">
				<i class="mdi mdi-close mdi-24px"></i>
			</button>
			<button class="btn btn-light btn-sm rounded-circle" style="margin-right:5px; z-index: 100;" title="Refresh Psitions" @onclick="() => RefreshVertexPositions(true)">
				<i class="mdi mdi-adjust mdi-24px"></i>
			</button>
			<button class="btn btn-light btn-sm rounded-circle" style="margin-right:5px; z-index: 100;" title="Recenter graph" @onclick="() => RefreshVertexPositions(false)">
				<i class="mdi mdi-image-size-select-small mdi-24px"></i>
			</button>
			<button class="btn btn-light btn-sm rounded-circle" style="margin-right:5px; z-index: 100;" title="Filter by order : All / To Stores / Stores to / Not stores " @onclick="OnEdgeFilterClicked">
				<i class="mdi mdi-filter mdi-24px"></i>
			</button>
		</div>

		<div id="Zoomable" class="bg-dark bg-gradient" style="@($"position: absolute; height: {Height}px; width: {Width}px; top: {(HeightMain - Height) / 2}px; left: {(WidthMain - Width) / 2}px;")">
			<div id="directed-graph" class="bg-dark" style="@($"position: absolute; height: {(Height - 10)}px; width: {(Width - 10)}px; top: 5px; left: 5px;")">

				<VertexRenderer graph="@(graph)"
					OnVertexChanged="passingVertexFromVertexRenderer"/>

				<EdgeRenderer graph="@(graph)"
					EdgeFilter="@(EdgeFilterValue)"
					passedVertex="@(passingVertexForFilter)"
					passedGroup="@(passedGroup)"/>

			</div>
		</div>

	</div>

	<div class="modal fade" id="optionModel" tabindex="-1" aria-labelledby="optionModelLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered" style="width:216px;">
			<div class="modal-content">
				<div class="modal-body">
					<div class="d-flex flex-column align-content-around">
						<button type="button" class="btn btn-primary btn-sm mb-1" title="Filter this vertex" data-bs-dismiss="modal" @onclick="() => OnFilterOne(true)">
							Filter this vertex
						</button>
						<button type="button" class="btn btn-primary btn-sm mb-1" title="Filter this group" data-bs-dismiss="modal" @onclick="() => OnFilterOne(false)">
							Filter this group
						</button>

						<button type="button" class="btn btn-success btn-sm" title="Details" data-bs-toggle="modal" data-bs-target="#vertexModel">
							Details
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="vertexModel" tabindex="-1" aria-labelledby="vertexModelLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-body">
					<div>
						<div class="d-flex justify-content-between mb-3">
							<h1 class="modal-title fs-5" id="vertexModelLabel">@(passedVertex.Name)</h1>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>

						<ul style="list-style-type:none;">
							<li>
								<div class="row mb-2">
									<div class="col-sm-6">
										Total Connection :
									</div>
									<div class="col-sm-6">
										@(passedVertex.Adjacents.Count),
									</div>
								</div>
							</li>
							<li>
								<div class="row mb-2">
									<div class="col-sm-6">
										Total Entries :
									</div>
									<div class="col-sm-6">
										@(passedVertex.Entries.Count),
									</div>
								</div>
							</li>
							<li>
								<div class="row mb-2">
									<div class="col-sm-6">
										Total Departures :
									</div>
									<div class="col-sm-6">
										@(passedVertex.Adjacents.Count - passedVertex.Entries.Count),
									</div>
								</div>
							</li>
							<li>
								<div class="row mb-2">
									<div class="col-sm-6">
										All the connection :
									</div>
									<div class="col-sm-6">
										@foreach (var item in passedVertex.Adjacents)
										{
											<span>@(item), </span>
										}
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>


@code {
	[Parameter]
	public Classes.DirectedGraph graph { get; set; }

	[Parameter]
	public EventCallback OnCloseGraph { get; set; }

	[Parameter]
	public EventCallback OnReposition { get; set; }

	[Parameter]
	public double HeightMain { get; set; }

	[Parameter]
	public double WidthMain { get; set; }

	[Parameter]
	public double Height { get; set; }

	[Parameter]
	public double Width { get; set; }

	[Parameter]
	public double Scale { get; set; }

	public Classes.Vertex passedVertex { get; set; }
	public List<Classes.Vertex> passedGroup { get; set; }
	public Classes.Vertex passingVertexForFilter { get; set; }

	public List<string> EdgeFilterMode { get; set; }
	public string EdgeFilterValue { get; set; }
	private int EdgeFilterCounter { get; set; }

	private bool stateNeeded { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		passedVertex = new Classes.Vertex();
		passedGroup = new List<Classes.Vertex>();

		stateNeeded = true;

		EdgeFilterValue = "";
		EdgeFilterCounter = 0;

		EdgeFilterMode = new List<string>() { "ToMain", "MainTo", "NotMain", ""};

		passedVertex = graph.GetVertexSet().First();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			await JsRuntime.InvokeVoidAsync("makeDivZoomable", "Zoomable", Scale);
		}


		await base.OnAfterRenderAsync(firstRender);
	}	

	public async Task Close()
	{
		await OnCloseGraph.InvokeAsync();
	}

	public async Task RefreshVertexPositions(bool alsoPositions)
	{
		await JsRuntime.InvokeVoidAsync("refreshScale", "Zoomable", $"{(HeightMain - Height) / 2}", $"{(WidthMain - Width) / 2}", Scale);
		if(alsoPositions)
		{
			await OnReposition.InvokeAsync();
		}

	}

	public void passingVertexFromVertexRenderer(Classes.Vertex vertex)
	{

		var groups = graph.GetVertexGroups();
		if(passedVertex != vertex)
		{
			passedVertex = vertex;
			passedGroup = new List<Classes.Vertex>();

			foreach (var group in groups)
			{
				foreach (var v in group)
				{
					if (v.Name == passedVertex.Name)
					{
						passedGroup = group;
						break;
					}
				}
				if (passedGroup.Count != 0)
				{
					break;
				}
			}
		}

	}

	public void OnEdgeFilterClicked()
	{
		EdgeFilterValue = EdgeFilterMode[EdgeFilterCounter];

		if(EdgeFilterCounter == 3)
		{
			EdgeFilterCounter = 0;
		}
		else
		{
			EdgeFilterCounter++;
		}
	}

	public void OnFilterOne(bool isVertex)
	{
		passingVertexForFilter = passedVertex;
		EdgeFilterValue = isVertex ? "OneVertex" : "OneGroup";
		EdgeFilterCounter = 3;
	}
}
