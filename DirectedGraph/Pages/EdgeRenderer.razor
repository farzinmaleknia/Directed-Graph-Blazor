@inject IJSRuntime JsRuntime


<div>
    @foreach (var edge in graph.GetEdgeSet())
    {
        Connect(edge.Start.X, edge.Start.Y, edge.End.X, edge.End.Y, 1);
        <div style='z-index: 10; color: gray; padding:0px; margin:0px; height: 1px; background-color: gray; line-height:0.5px; position:absolute; left: @(DivsParams.cx + 18)px; top:@(DivsParams.cy + 27)px; width:@(DivsParams.Length)px; -moz-transform:rotate(@(DivsParams.angle)deg); -webkit-transform:rotate(@(DivsParams.angle)deg); -o-transform:rotate(@(DivsParams.angle)deg); -ms-transform:rotate(@(DivsParams.angle)deg); transform:rotate(@(DivsParams.angle)deg);'>
            <div style="padding-top: 1px">
                @temp
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Classes.DirectedGraph<Classes.Vertex, string> graph { get; set; }

    private Classes.LineDivParams DivsParams { get; set; }
    private string temp { get; set; } = "<<<";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DivsParams = new Classes.LineDivParams();

        await JsRuntime.InvokeVoidAsync("makeDivZoomable", "directed-graph");
	}

    private void Connect(double x1, double y1, double x2, double y2, double thickness, string color = "")
    {
        var length = Math.Sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));

        var cx = ((x1 + x2) / 2) - (length / 2);
        var cy = ((y1 + y2) / 2) - (thickness / 2);

        var angle = Math.Atan2((y1 - y2), (x1 - x2)) * (180 / Math.PI);

        DivsParams.Length = length;
        DivsParams.cx = cx;
        DivsParams.cy = cy;
        DivsParams.angle = angle;


    }
}
