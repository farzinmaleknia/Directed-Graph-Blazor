@page "/Main"

@inject IJSRuntime JsRuntime


@if(isBodyLoaded)
{
	<h3>Directed Graph</h3>


	<div class="bg-dark bg-opacity-50" style="@($"position: absolute; height: {HeightMain}px; width: {WidthMain}px; top: 0; left: 0;")">
		<div id="directed-graph" class="bg-dark" style="@($"position: absolute; height: 80%; width: 80%; top: {(HeightMain)*0.10}px; left: {(WidthMain)*0.10}px;")">
			@(isHtmlRenderd = true)
			@if(Height > 0)
			{
				<VertexRenderer graph="graph"
							Height="@Height"
							Width="@Width"
							Top="@Top"
							Left="@Left" />

				<EdgeRenderer graph="graph" />
			}



		</div>
	</div>


}

@code {
	public Classes.DirectedGraph<Classes.Vertex, string> graph { get; set; }

	private double HeightMain { get; set; }
	private double WidthMain { get; set; }
	private double Height { get; set; }
	private double Width { get; set; }
	private double Top { get; set; }
	private double Right { get; set; }
	private double Left { get; set; }

	private bool isClicked = false;
	private bool isBodyLoaded = false;
	private bool stateNeeded = true;
	private bool isHtmlRenderd = false;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		graph = new Classes.DirectedGraph<Classes.Vertex, string>();

		Classes.Vertex A = new Classes.Vertex(){Name= "A"};
		Classes.Vertex B = new Classes.Vertex(){Name= "B"};
		Classes.Vertex C = new Classes.Vertex(){Name= "C"};
		Classes.Vertex D = new Classes.Vertex(){Name= "D"};
		Classes.Vertex E = new Classes.Vertex(){Name= "E"};
		Classes.Vertex F = new Classes.Vertex(){Name= "F"};
		Classes.Vertex G = new Classes.Vertex(){Name= "G"};
		Classes.Vertex H = new Classes.Vertex(){Name= "H"};
		Classes.Vertex I = new Classes.Vertex(){Name= "I"};
		Classes.Vertex J = new Classes.Vertex(){Name= "J"};
		Classes.Vertex K = new Classes.Vertex(){Name= "K"};
		Classes.Vertex L = new Classes.Vertex(){Name= "L"};
		Classes.Vertex M = new Classes.Vertex(){Name= "M"};
		Classes.Vertex N = new Classes.Vertex(){Name= "N"};
		Classes.Vertex O = new Classes.Vertex(){Name= "O"};
		Classes.Vertex P = new Classes.Vertex(){Name= "P"};

		graph.AddVertex(new List<Classes.Vertex> { A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P });

		graph.AddEdge(A, B, "label1");
		graph.AddEdge(C, E, "label2");
		graph.AddEdge(D, A, "label3");

		await GetBodyDimention();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		//foreach(var item in graph.GetVertexSet())
		//{
		//	Console.WriteLine($"{item.Name} - {item.X} - {item.Y}");
		//}

		if (!firstRender)
		{
			if (!isBodyLoaded)
			{
				await GetBodyDimention();

				StateHasChanged();
			}
			if (isBodyLoaded)
			{
				await GetBackGroundDimention();
				
			}
		}


		await base.OnAfterRenderAsync(firstRender);
	}

	public async Task GetBodyDimention()
	{
		Dictionary<string, string> displayDimention = await JsRuntime.InvokeAsync<Dictionary<string, string>>("getElementDimension", "body");

		WidthMain = double.Parse(displayDimention["width"]);
		HeightMain = double.Parse(displayDimention["height"]);

		if (HeightMain > 100)
		{

			isBodyLoaded = true;
		}
	}	

	public async Task GetBackGroundDimention()
	{

		if (isBodyLoaded && isHtmlRenderd)
		{
			//await Task.Delay(5000);
			Dictionary<string, string> BackgroundDimention = await JsRuntime.InvokeAsync<Dictionary<string, string>>("getElementDimension", "directed-graph");



			Width = double.Parse(BackgroundDimention["width"]);
			Height = double.Parse(BackgroundDimention["height"]);
			Top = double.Parse(BackgroundDimention["top"]);
			Left = double.Parse(BackgroundDimention["left"]);

			//Console.WriteLine($"top: {Top}, left: {Left}, height: {Height}, width: {Width}");

			if(stateNeeded)
			{
				StateHasChanged();
				stateNeeded = false;
			}
		}


	}

	public async Task GetDimentions()
	{
		await GetBackGroundDimention();

		isClicked = true;

		

	}
}
