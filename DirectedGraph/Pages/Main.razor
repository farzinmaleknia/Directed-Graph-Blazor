@page "/Main"

@inject IJSRuntime JsRuntime


@if(true)
{
	<h3>Directed Graph</h3>
	
}

<div class="bg-dark bg-opacity-50" style="@($"position: absolute; height: {HeightMain}px; width: {WidthMain}px; top: 0; left: 0;")">
	<div id="directed-graph" class="bg-light" style="@($"position: absolute; height: 80%; width: 80%; top: {(HeightMain)*0.10}px; left: {(WidthMain)*0.10}px;")">

		@if(!isClicked)
		{
			<button class="btn btn-dark m-5" @onclick="() => GetDimentions()">
				Click Here to show graph
			</button>
		}
		else
		{
			<DotRenderer 
				graph="graph"
				Height="@Height"
				Width="@Width"
				Top="@Top"
				Left="@Left" />
		}


	</div>
</div>

@code {
	public Classes.DirectedGraph<string, string> graph { get; set; }

	private double HeightMain { get; set; }
	private double WidthMain { get; set; }
	private double Height { get; set; }
	private double Width { get; set; }
	private double Top { get; set; }
	private double Right { get; set; }
	private double Left { get; set; }

	private bool isClicked = false;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		graph = new Classes.DirectedGraph<string, string>();

		graph.AddVertex(new[] { "A", "B", "C", "D", "E" });
		graph.AddEdge("A", "B", "label1");
		graph.AddEdge("C", "E", "label2");

		await GetBodyDimention();
		await GetBackGroundDimention();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await GetBackGroundDimention();

		await base.OnAfterRenderAsync(firstRender);
	}

	public async Task GetBodyDimention()
	{
		Dictionary<string, string> displayDimention = await JsRuntime.InvokeAsync<Dictionary<string, string>>("getElementDimension", "body");

		WidthMain = double.Parse(displayDimention["width"]);
		HeightMain = double.Parse(displayDimention["height"]);

	}	

	public async Task GetBackGroundDimention()
	{
		//await Task.Delay(5000);
		Dictionary<string, string> BackgroundDimention = await JsRuntime.InvokeAsync<Dictionary<string, string>>("getElementDimension", "directed-graph");

		Width = double.Parse(BackgroundDimention["width"]);
		Height = double.Parse(BackgroundDimention["height"]);
		Top = double.Parse(BackgroundDimention["top"]);
		Left = double.Parse(BackgroundDimention["left"]);

		Console.WriteLine($"top: {Top}, left: {Left}, height: {Height}, width: {Width}");

	}

	public double GetRandomPosition(double max)
	{

		Random number = new Random();
		double num = number.NextDouble() * (max - 1) + 1;

		return num;

	}

	public async Task GetDimentions()
	{
		await GetBackGroundDimention();

		isClicked = true;

		

	}
}
