@inject IJSRuntime JsRuntime

@using System.Diagnostics;


@foreach (var item in graph.GetVertexSet())
{
	<img src="@($"./images/circle-{item.Color}.png?v=1.2")" alt="" width="@(item.IconSize)"
		@onclick="() => passingVertex(item)"
		 style="@($"color: black; z-index: 20; font-size: {item.IconSize}px; color: {item.Color}; position: absolute; left: {(item.X)}px; top: {item.Y}px; direction: rtl;")"
		title="@($"نام : {item.Name} \nتعداد ورودی ها : {item.Entries.Count} \nتعداد خروجی ها : {item.Adjacents.Count - item.Entries.Count}")" 
		data-bs-toggle="modal"
		data-bs-target="#optionModel" />

}



@code {
	[Parameter]
	public Classes.DirectedGraph graph { get; set; }

	[Parameter]
	public EventCallback<Classes.Vertex> OnVertexChanged { get; set; }

	public Classes.Vertex passedVertex { get; set; }




	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		passedVertex = new Classes.Vertex()
		{
			Name = "A",
			Adjacents = new List<string>(),
			Entries = new List<string>(),
		};

		graph.AddVertex(passedVertex);


	}


	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

	}



	public void passingVertex(Classes.Vertex vertex)
	{
		passedVertex = vertex;
		OnVertexChanged.InvokeAsync(vertex);
	}

}
